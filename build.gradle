buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

archivesBaseName = project.archives_base_name
group = project.maven_group

if (System.env.CI == "true") {
    def branch
    branch = System.env.GITHUB_REF
    branch = branch.substring(branch.lastIndexOf("/") + 1)

    version = "${project.mod_version}+a${System.env.GITHUB_RUN_NUMBER}.${branch}-forge"
} else {
    version = "${project.mod_version}+${project.minecraft_version}-forge"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.


repositories {
    maven {
        url "https://www.cursemaven.com"
    }
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: project.mappings_channel, version: project.mappings_version

    runs {
        client {
            workingDirectory project.file('run')
            arg "-mixin.config=splatcraft.mixins.json"
            arg '--uuid 42941b8f-d0c3-45dd-8cbb-1f6f388de45e'
            arg '--username Cibernet'

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'

            mods {
                splatcraft {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('server')
            arg "-mixin.config=splatcraft.mixins.json"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'

            args 'nogui'

            mods {
                splatcraft {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'

            args '--mod', project.archives_base_name, '--all', '--output', file('src/generated/resources/')

            mods {
                splatcraft {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "splatcraft.refmap.json"
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"
    compile fg.deobf("curse.maven:obfuscate-${project.obfuscate_version}")
    annotationProcessor 'org.spongepowered:mixin:0.8:processor'

}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "MixinConfigs": "splatcraft.mixins.json",
                "Specification-Title": project.archives_base_name,
                "Specification-Vendor": project.author,
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor": project.author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
}
